buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'http://repo.jfrog.org/artifactory/gradle-plugins'
        }
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.0.16'
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'shadow'

version=currentVersion
group=currentGroup



repositories {
    mavenLocal()
    mavenCentral()
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

    compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-auth:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-client:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-views:${dropwizardVersion}"

    testCompile "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.0-SNAPSHOT"
    testRuntime "cglib:cglib-nodep:2.2.2"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:1.2"    // allows mocking of classes without default constructor (together with CGLIB)

    // needed for validation tests so logging in hibernate validator does not throw exception
    compile 'ch.qos.logback:logback-classic:1.0.7'
    compile "org.slf4j:log4j-over-slf4j:1.7.2"

}

jar {
    manifest {
        attributes 'Main-Class': "${mainClass}"
        attributes 'Built-Date': new Date() //now
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
    }
}


shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

task run(dependsOn: 'shadowJar', group: 'dropwizard',  description: "Run service using dev configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith('dw') }
    javaexec {
        main = '-jar'
        args = ["${shadow.shadowJar.getPath()}", 'server', 'dev_config.yml']
        systemProperties = props
    }
}

